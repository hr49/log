#!/bin/bash

# Copyright (C) 2018 Matthew Marting
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -o pipefail

source libdie.sh

source libtlogger.sh

readonly METALOG_DATE_FORMAT='+%a %b %d %H:%M:%S %Y %z'

get_log_path() {
  version::get_path "$LOG_PATH_VERSION_HEAD" "$LOG_PATH_VERSION_TAIL" "$1"
}

get_the_log_versions_descending() {
  version::get_the_versions_descending \
    "$LOG_PATH_DIRNAME" \
    "$LOG_PATH_VERSION_HEAD" \
    "$LOG_PATH_VERSION_TAIL" \
    "$LOG_PATH_REGEX"
}

get_log_date() {
  local log_date_line

  log_date_line="$(sed --quiet -- '2p' "$1")" || return 1

  readonly log_date_line
  echo "${log_date_line#Script started on }"
}

get_formatted_log_date() {
  local log_date

  log_date="$(get_log_date "$1")" || return 1

  readonly log_date
  date --date="$log_date" -- "$METALOG_DATE_FORMAT"
}

get_log_command() {
  sed --quiet -- '1p' "$1"
}

str_log() {
  local formatted_log_date
  
  formatted_log_date="$(get_formatted_log_date "$1")" || return 1

  readonly formatted_log_date
  local log_command

  log_command="$(get_log_command "$1")" || return 1

  readonly log_command
  echo -e '\E[33mlog '"$1"'\E[m\n'`
         `'Date: '"$formatted_log_date"'\n'`
         `'\n'`
         `'    '"$log_command"
}

str_metalog() {
  [[ -e "$LOG_PATH_DIRNAME" ]] || return 0

  local log_paths=()

  while IFS= read -r log_version; do
    log_paths+=("$(get_log_path "$log_version")")
  done < <(get_the_log_versions_descending; echo -n "$?")

  (return "$log_version") || return 1

  if [[ -e "$LOG_PATH" ]]; then
    log_paths+=("$LOG_PATH")
  fi

  readonly log_paths
  local -r number_of_log_paths="${#log_paths[@]}"

  (( number_of_log_paths > 0 )) || return 0

  for log_path in "${log_paths[@]::number_of_log_paths - 1}"; do
    str_log "$log_path"
    echo
  done

  str_log "${log_paths[-1]}"
}

main() {
  str_metalog | less --quit-if-one-screen --RAW-CONTROL-CHARS --no-init
}

main "$@"
